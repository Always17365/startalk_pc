// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MessageKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageLength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageLength_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelcomeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelcomeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartTLS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartTLS_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProceedTLS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProceedTLS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Capability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Capability_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSucceeded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSucceeded_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseFailure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseFailure_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* IQMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IQMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PresenceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PresenceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* XmppMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XmppMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SignalType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StringHeaderType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IQMessageKeyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamEndCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CategoryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PresenceKeyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  MessageKeyValue_descriptor_ = file->message_type(0);
  static const int MessageKeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageKeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageKeyValue, value_),
  };
  MessageKeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageKeyValue_descriptor_,
      MessageKeyValue::default_instance_,
      MessageKeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageKeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageKeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageKeyValue));
  StringHeader_descriptor_ = file->message_type(1);
  static const int StringHeader_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringHeader, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringHeader, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringHeader, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringHeader, definedkey_),
  };
  StringHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringHeader_descriptor_,
      StringHeader::default_instance_,
      StringHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringHeader));
  PackageLength_descriptor_ = file->message_type(2);
  static const int PackageLength_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageLength, length_),
  };
  PackageLength_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageLength_descriptor_,
      PackageLength::default_instance_,
      PackageLength_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageLength, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageLength, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageLength));
  ProtoHeader_descriptor_ = file->message_type(3);
  static const int ProtoHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHeader, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHeader, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHeader, optionlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHeader, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHeader, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHeader, message_),
  };
  ProtoHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoHeader_descriptor_,
      ProtoHeader::default_instance_,
      ProtoHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoHeader));
  AuthMessage_descriptor_ = file->message_type(4);
  static const int AuthMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, mechanism_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, authkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, otherbody_),
  };
  AuthMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthMessage_descriptor_,
      AuthMessage::default_instance_,
      AuthMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthMessage));
  WelcomeMessage_descriptor_ = file->message_type(5);
  static const int WelcomeMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelcomeMessage, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelcomeMessage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelcomeMessage, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelcomeMessage, sockmod_),
  };
  WelcomeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelcomeMessage_descriptor_,
      WelcomeMessage::default_instance_,
      WelcomeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelcomeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelcomeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelcomeMessage));
  StreamBegin_descriptor_ = file->message_type(6);
  static const int StreamBegin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamBegin, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamBegin, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamBegin, bodys_),
  };
  StreamBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamBegin_descriptor_,
      StreamBegin::default_instance_,
      StreamBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamBegin));
  StartTLS_descriptor_ = file->message_type(7);
  static const int StartTLS_offsets_[1] = {
  };
  StartTLS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartTLS_descriptor_,
      StartTLS::default_instance_,
      StartTLS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTLS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTLS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartTLS));
  ProceedTLS_descriptor_ = file->message_type(8);
  static const int ProceedTLS_offsets_[1] = {
  };
  ProceedTLS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProceedTLS_descriptor_,
      ProceedTLS::default_instance_,
      ProceedTLS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProceedTLS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProceedTLS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProceedTLS));
  StreamEnd_descriptor_ = file->message_type(9);
  static const int StreamEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEnd, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEnd, code_),
  };
  StreamEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamEnd_descriptor_,
      StreamEnd::default_instance_,
      StreamEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamEnd));
  UserConnect_descriptor_ = file->message_type(10);
  static const int UserConnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserConnect, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserConnect, version_),
  };
  UserConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserConnect_descriptor_,
      UserConnect::default_instance_,
      UserConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserConnect));
  Capability_descriptor_ = file->message_type(11);
  static const int Capability_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, bodys_),
  };
  Capability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Capability_descriptor_,
      Capability::default_instance_,
      Capability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Capability));
  ResponseSucceeded_descriptor_ = file->message_type(12);
  static const int ResponseSucceeded_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSucceeded, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSucceeded, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSucceeded, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSucceeded, body_),
  };
  ResponseSucceeded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseSucceeded_descriptor_,
      ResponseSucceeded::default_instance_,
      ResponseSucceeded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSucceeded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSucceeded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseSucceeded));
  ResponseFailure_descriptor_ = file->message_type(13);
  static const int ResponseFailure_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFailure, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFailure, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFailure, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFailure, body_),
  };
  ResponseFailure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseFailure_descriptor_,
      ResponseFailure::default_instance_,
      ResponseFailure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFailure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFailure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseFailure));
  ProtoMessage_descriptor_ = file->message_type(14);
  static const int ProtoMessage_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, signaltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, realfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, realto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, originfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, originto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, origintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, sendjid_),
  };
  ProtoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_descriptor_,
      ProtoMessage::default_instance_,
      ProtoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage));
  MessageBody_descriptor_ = file->message_type(15);
  static const int MessageBody_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBody, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBody, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBody, bodys_),
  };
  MessageBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageBody_descriptor_,
      MessageBody::default_instance_,
      MessageBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageBody));
  IQMessage_descriptor_ = file->message_type(16);
  static const int IQMessage_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, namespace__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, receivedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, transfertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, bodys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, definedkey_),
  };
  IQMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IQMessage_descriptor_,
      IQMessage::default_instance_,
      IQMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IQMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IQMessage));
  PresenceMessage_descriptor_ = file->message_type(17);
  static const int PresenceMessage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, namespace__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, receivedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, transfertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, bodys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, definedkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, categorytype_),
  };
  PresenceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PresenceMessage_descriptor_,
      PresenceMessage::default_instance_,
      PresenceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PresenceMessage));
  XmppMessage_descriptor_ = file->message_type(18);
  static const int XmppMessage_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, clienttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, namespace__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, receivedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, transfertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, bodys_),
  };
  XmppMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XmppMessage_descriptor_,
      XmppMessage::default_instance_,
      XmppMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmppMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XmppMessage));
  SignalType_descriptor_ = file->enum_type(0);
  ClientType_descriptor_ = file->enum_type(1);
  MessageType_descriptor_ = file->enum_type(2);
  StringHeaderType_descriptor_ = file->enum_type(3);
  IQMessageKeyType_descriptor_ = file->enum_type(4);
  StreamEndCode_descriptor_ = file->enum_type(5);
  CategoryType_descriptor_ = file->enum_type(6);
  PresenceKeyType_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageKeyValue_descriptor_, &MessageKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringHeader_descriptor_, &StringHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageLength_descriptor_, &PackageLength::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoHeader_descriptor_, &ProtoHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthMessage_descriptor_, &AuthMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelcomeMessage_descriptor_, &WelcomeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamBegin_descriptor_, &StreamBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartTLS_descriptor_, &StartTLS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProceedTLS_descriptor_, &ProceedTLS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamEnd_descriptor_, &StreamEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserConnect_descriptor_, &UserConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Capability_descriptor_, &Capability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseSucceeded_descriptor_, &ResponseSucceeded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseFailure_descriptor_, &ResponseFailure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_descriptor_, &ProtoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageBody_descriptor_, &MessageBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IQMessage_descriptor_, &IQMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PresenceMessage_descriptor_, &PresenceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XmppMessage_descriptor_, &XmppMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete MessageKeyValue::default_instance_;
  delete MessageKeyValue_reflection_;
  delete StringHeader::default_instance_;
  delete StringHeader_reflection_;
  delete PackageLength::default_instance_;
  delete PackageLength_reflection_;
  delete ProtoHeader::default_instance_;
  delete ProtoHeader_reflection_;
  delete AuthMessage::default_instance_;
  delete AuthMessage_reflection_;
  delete WelcomeMessage::default_instance_;
  delete WelcomeMessage_reflection_;
  delete StreamBegin::default_instance_;
  delete StreamBegin_reflection_;
  delete StartTLS::default_instance_;
  delete StartTLS_reflection_;
  delete ProceedTLS::default_instance_;
  delete ProceedTLS_reflection_;
  delete StreamEnd::default_instance_;
  delete StreamEnd_reflection_;
  delete UserConnect::default_instance_;
  delete UserConnect_reflection_;
  delete Capability::default_instance_;
  delete Capability_reflection_;
  delete ResponseSucceeded::default_instance_;
  delete ResponseSucceeded_reflection_;
  delete ResponseFailure::default_instance_;
  delete ResponseFailure_reflection_;
  delete ProtoMessage::default_instance_;
  delete ProtoMessage_reflection_;
  delete MessageBody::default_instance_;
  delete MessageBody_reflection_;
  delete IQMessage::default_instance_;
  delete IQMessage_reflection_;
  delete PresenceMessage::default_instance_;
  delete PresenceMessage_reflection_;
  delete XmppMessage::default_instance_;
  delete XmppMessage_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"-\n\017MessageKeyValue\022\013\n\003ke"
    "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"s\n\014StringHeader\022 "
    "\n\006params\030\001 \003(\0132\020.MessageKeyValue\022\013\n\003key\030"
    "\002 \001(\t\022\r\n\005value\030\003 \001(\t\022%\n\ndefinedKey\030\004 \001(\016"
    "2\021.StringHeaderType\"\037\n\rPackageLength\022\016\n\006"
    "length\030\001 \001(\005\"u\n\013ProtoHeader\022\017\n\007version\030\001"
    " \001(\005\022\017\n\007options\030\002 \001(\005\022\022\n\noptionlist\030\003 \003("
    "\005\022\016\n\006length\030\004 \001(\005\022\017\n\007content\030\005 \001(\t\022\017\n\007me"
    "ssage\030\006 \001(\014\"q\n\013AuthMessage\022\021\n\tmechanism\030"
    "\001 \001(\t\022\016\n\006method\030\002 \001(\t\022\r\n\005msgId\030\003 \001(\t\022\017\n\007"
    "authKey\030\004 \001(\t\022\037\n\totherBody\030\005 \001(\0132\014.Messa"
    "geBody\"P\n\016WelcomeMessage\022\016\n\006domain\030\001 \001(\t"
    "\022\017\n\007version\030\002 \001(\t\022\014\n\004user\030\003 \001(\t\022\017\n\007sockm"
    "od\030\004 \001(\t\"K\n\013StreamBegin\022\016\n\006domain\030\001 \001(\t\022"
    "\017\n\007version\030\002 \001(\t\022\033\n\005bodys\030\003 \003(\0132\014.Messag"
    "eBody\"\n\n\010StartTLS\"\014\n\nProceedTLS\")\n\tStrea"
    "mEnd\022\016\n\006reason\030\001 \001(\t\022\014\n\004code\030\002 \001(\005\".\n\013Us"
    "erConnect\022\016\n\006domain\030\001 \001(\t\022\017\n\007version\030\002 \001"
    "(\t\":\n\nCapability\022\017\n\007version\030\001 \001(\t\022\033\n\005bod"
    "ys\030\002 \001(\0132\014.MessageBody\"Z\n\021ResponseSuccee"
    "ded\022\014\n\004code\030\001 \001(\005\022\r\n\005msgId\030\002 \001(\t\022\014\n\004info"
    "\030\003 \001(\t\022\032\n\004body\030\004 \001(\0132\014.MessageBody\"Y\n\017Re"
    "sponseFailure\022\014\n\004code\030\001 \001(\005\022\r\n\005msgId\030\002 \001"
    "(\t\022\r\n\005error\030\003 \001(\t\022\032\n\004body\030\004 \001(\0132\014.Messag"
    "eBody\"\316\001\n\014ProtoMessage\022\017\n\007options\030\001 \001(\005\022"
    "\025\n\nsignalType\030\002 \002(\005:\0010\022\014\n\004from\030\003 \001(\t\022\n\n\002"
    "to\030\004 \001(\t\022\017\n\007message\030\005 \001(\014\022\020\n\010realfrom\030\006 "
    "\001(\t\022\016\n\006realto\030\007 \001(\t\022\022\n\noriginfrom\030\010 \001(\t\022"
    "\020\n\010originto\030\t \001(\t\022\022\n\norigintype\030\n \001(\t\022\017\n"
    "\007sendjid\030\013 \001(\t\"Y\n\013MessageBody\022\036\n\007headers"
    "\030\001 \003(\0132\r.StringHeader\022\r\n\005value\030\002 \001(\t\022\033\n\005"
    "bodys\030\003 \003(\0132\014.MessageBody\"\230\002\n\tIQMessage\022"
    "\021\n\tnamespace\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\r\n\005value"
    "\030\003 \001(\t\022\021\n\tmessageId\030\004 \001(\t\022\035\n\006header\030\005 \001("
    "\0132\r.StringHeader\022\032\n\004body\030\006 \001(\0132\014.Message"
    "Body\022\024\n\014receivedTime\030\007 \001(\003\022\024\n\014transferTi"
    "me\030\010 \001(\003\022\036\n\007headers\030\t \003(\0132\r.StringHeader"
    "\022\033\n\005bodys\030\n \003(\0132\014.MessageBody\022%\n\ndefined"
    "Key\030\013 \001(\0162\021.IQMessageKeyType\"\263\002\n\017Presenc"
    "eMessage\022\021\n\tnamespace\030\001 \001(\t\022\013\n\003key\030\002 \001(\t"
    "\022\r\n\005value\030\003 \001(\t\022\021\n\tmessageId\030\004 \001(\t\022\035\n\006he"
    "ader\030\005 \001(\0132\r.StringHeader\022\032\n\004body\030\006 \001(\0132"
    "\014.MessageBody\022\024\n\014receivedTime\030\007 \001(\003\022\024\n\014t"
    "ransferTime\030\010 \001(\003\022\036\n\007headers\030\t \003(\0132\r.Str"
    "ingHeader\022\033\n\005bodys\030\n \003(\0132\014.MessageBody\022$"
    "\n\ndefinedKey\030\013 \001(\0162\020.PresenceKeyType\022\024\n\014"
    "categoryType\030\014 \001(\005\"\271\002\n\013XmppMessage\022\026\n\013me"
    "ssageType\030\001 \002(\005:\0010\022\025\n\nclientType\030\002 \002(\005:\001"
    "0\022\025\n\rclientVersion\030\003 \002(\003\022\021\n\tnamespace\030\004 "
    "\001(\t\022\013\n\003key\030\005 \001(\t\022\r\n\005value\030\006 \001(\t\022\021\n\tmessa"
    "geId\030\007 \001(\t\022\035\n\006header\030\010 \001(\0132\r.StringHeade"
    "r\022\032\n\004body\030\t \001(\0132\014.MessageBody\022\024\n\014receive"
    "dTime\030\n \001(\003\022\024\n\014transferTime\030\013 \001(\003\022\036\n\007hea"
    "ders\030\014 \003(\0132\r.StringHeader\022\033\n\005bodys\030\r \003(\013"
    "2\014.MessageBody*\246\006\n\nSignalType\022\026\n\022SignalT"
    "ypePresence\020\001\022\020\n\014SignalTypeIQ\020\002\022\030\n\024Signa"
    "lTypeIQResponse\020\003\022\037\n\033SignalTypeSucceeded"
    "Response\020\004\022\035\n\031SignalTypeFailureResponse\020"
    "\005\022\022\n\016SignalTypeChat\020\006\022\027\n\023SignalTypeGroup"
    "Chat\020\007\022\024\n\020SignalTypeNormal\020\010\022\023\n\017SignalTy"
    "peError\020\t\022\024\n\020SignalTypeTyping\020\n\022\022\n\016Signa"
    "lTypeNote\020\013\022\026\n\022SignalTypeTransfor\020\014\022\026\n\022S"
    "ignalTypeReadmark\020\r\022\024\n\020SignalTypeRevoke\020"
    "\016\022\032\n\026SignalTypeSubscription\020\017\022\024\n\020SignalT"
    "ypeMState\020\020\022\026\n\022SignalTypeHeadline\020\021\022\033\n\027S"
    "ignalTypeShareLocation\020\024\022\027\n\023SignalTypeHe"
    "artBeat\020\036\022\022\n\016SignalTypeAuth\020-\022\031\n\025SignalT"
    "ypeStreamBegin\0202\022\027\n\023SignalTypeStreamEnd\020"
    "3\022\025\n\021SignalTypeWelcome\020d\022\031\n\025SignalTypeUs"
    "erConnect\020e\022\027\n\023SignalTypeChallenge\020f\022\022\n\016"
    "SignalStartTLS\020j\022\024\n\020SignalProceedTLS\020l\022\024"
    "\n\020SignalTypeWebRtc\020n\022\025\n\020SignalTypeCarbon"
    "\020\200\001\022\026\n\021SignalTypeConsult\020\204\001\022\031\n\024SignalTyp"
    "eEncryption\020\210\001\022\031\n\024SignalTypeCollection\020\214"
    "\001\022\024\n\017SignalTypeTrans\020\215\001*\203\001\n\nClientType\022\021"
    "\n\rClientTypeMac\020\001\022\021\n\rClientTypeiOS\020\002\022\020\n\014"
    "ClientTypePC\020\003\022\025\n\021ClientTypeAndroid\020\004\022\023\n"
    "\017ClientTypeLinux\020\005\022\021\n\rClientTypeWeb\020\006*\255\017"
    "\n\013MessageType\022\035\n\020MessageTypePNote\020\365\377\377\377\377\377"
    "\377\377\377\001\022\036\n\021MessageTypeRevoke\020\377\377\377\377\377\377\377\377\377\001\022%\n\030"
    "MessageTypeConsultRevoke\020\376\377\377\377\377\377\377\377\377\001\022\023\n\017M"
    "essageTypeText\020\001\022\024\n\020MessageTypeVoice\020\002\022\024"
    "\n\020MessageTypePhoto\020\003\022\030\n\024MessageTypeSogou"
    "Icon\020\004\022\023\n\017MessageTypeFile\020\005\022\024\n\020MessageTy"
    "peTopic\020\006\022\027\n\023MessageTypeRichText\020\007\022\035\n\031Me"
    "ssageTypeActionRichText\020\010\022\024\n\020MessageType"
    "Reply\020\t\022\024\n\020MessageTypeShock\020\n\022\023\n\017Message"
    "TypeNote\020\013\022\026\n\022MessageTypeGroupAt\020\014\022\027\n\023Me"
    "ssageTypeMarkdown\020\r\022\026\n\022MessageTypeExtTex"
    "t\020\016\022\032\n\026MessageTypeGroupNotify\020\017\022\031\n\025Messa"
    "geTypeLocalShare\020\020\022\032\n\026MessageTypeWebRTCA"
    "udio\020\024\022\032\n\026MessageTypeWebRTCVidio\020\025\022\027\n\023Me"
    "ssageTypeImageNew\020\036\022\031\n\025MessageTypeSmallV"
    "ideo\020 \022\032\n\026MessageTypeRobotAnswer\020/\022\031\n\025Me"
    "ssageTypeSourceCode\020@\022\023\n\017MessageTypeTime"
    "\020e\022\035\n\030MessageTypeBurnAfterRead\020\200\001\022\031\n\024Mes"
    "sageTypeCardShare\020\200\002\022\035\n\030MessageTypeMeeti"
    "ngRemind\020\201\002\022!\n\034MessageTypeWorkWorldAtRem"
    "ind\020\202\002\022\033\n\026MessageTypeMedalRemind\020\203\002\022\027\n\022M"
    "essageTypeEncrypt\020\224\003\022\030\n\023MessageTypeActiv"
    "ity\020\377\003\022\027\n\022MessageTypeRedPack\020\200\004\022\022\n\rMessa"
    "geTypeAA\020\201\004\022\035\n\030MessageTypeCommonTrdInfo\020"
    "\232\005\022!\n\034MessageTypeCommonProductInfo\020\370\006\022#\n"
    "\036MessageTypeTransChatToCustomer\020\351\007\022,\n\'Me"
    "ssageTypeTransChatToCustomer_Feedback\020\353\007"
    "\022*\n%MessageTypeTransChatToCustomerServic"
    "e\020\352\007\0223\n.MessageTypeTransChatToCustomerSe"
    "rvice_Feedback\020\354\007\022\033\n\026MessageTypeRedPackI"
    "nfo\020\200\010\022\026\n\021MessageTypeAAInfo\020\201\010\022\027\n\022Messag"
    "eTypeConsult\020\321\017\022\035\n\030MessageTypeConsultRes"
    "ult\020\322\017\022\035\n\030MessageTypeGrabMenuVcard\020\323\017\022\036\n"
    "\031MessageTypeGrabMenuResult\020\324\017\022\032\n\025Message"
    "TypeQCZhongbao\020\325\017\022\036\n\031MessageTypeMicroTou"
    "rGuide\020\271\027\022\027\n\022MessageTypeProduct\020\200 \022 \n\033We"
    "bRTC_MsgType_VideoMeeting\020\211\'\022\035\n\030MessageT"
    "ypeShareLocation\020\200@\022\033\n\026MessageTypeTransN"
    "ormal\020\341N\022\031\n\023WebRTC_MsgType_Live\020\335\377\003\022\036\n\030W"
    "ebRTC_MsgType_VideoCall\020\341\377\003\022\036\n\030WebRTC_Ms"
    "gType_AudioCall\020\342\377\003\022 \n\032WebRTC_MsgType_Vi"
    "deo_Group\020\376\377\003\022\032\n\024WebRTC_MsgType_Video\020\377\377"
    "\003\022\"\n\034MessageTypeRobotQuestionList\020\200\200\004\022 \n"
    "\032MessageTypeRobotTurnToUser\020\201\200\004\022%\n\037Messa"
    "geTypeRobotQuestionListNew\020\202\200\004\022\035\n\027Messag"
    "eTypeFlightRemind\020\216\200\004\022\"\n\034MessageTypeComm"
    "onServiceCard\020\217\200\004\022\032\n\024WebRTC_MsgType_Audi"
    "o\020\200\200\010\022\030\n\021MessageTypeNotice\020\200\200\200@\022\031\n\021Messa"
    "geTypeSystem\020\200\200\200\200\001\022\031\n\021MediaTypeSystemLY\020"
    "\201\200\200\200\001*\215\010\n\020StringHeaderType\022\032\n\026StringHead"
    "erTypeChatId\020\001\022\035\n\031StringHeaderTypeChanne"
    "lId\020\002\022\036\n\032StringHeaderTypeExtendInfo\020\003\022\036\n"
    "\032StringHeaderTypeBackupInfo\020\004\022\034\n\030StringH"
    "eaderTypeReadType\020\005\022\027\n\023StringHeaderTypeJ"
    "id\020\007\022\033\n\027StringHeaderTypeRealJid\020\010\022\035\n\031Str"
    "ingHeaderTypeInviteJid\020\t\022\035\n\031StringHeader"
    "TypeDeleleJid\020\n\022\030\n\024StringHeaderTypeNick\020"
    "\014\022\031\n\025StringHeaderTypeTitle\020\020\022\027\n\023StringHe"
    "aderTypePic\020\022\022\033\n\027StringHeaderTypeVersion"
    "\020\024\022\032\n\026StringHeaderTypeMethod\020\026\022\030\n\024String"
    "HeaderTypeBody\020\030\022\037\n\033StringHeaderTypeAffi"
    "liation\020\034\022\030\n\024StringHeaderTypeType\020\036\022\032\n\026S"
    "tringHeaderTypeResult\020 \022\032\n\026StringHeaderT"
    "ypeReason\020\"\022\030\n\024StringHeaderTypeRole\020$\022\032\n"
    "\026StringHeaderTypeDomain\020&\022\032\n\026StringHeade"
    "rTypeStatus\020(\022\030\n\024StringHeaderTypeCode\020*\022"
    "\031\n\025StringHeaderTypeCdata\0202\022\035\n\031StringHead"
    "erTypeTimeValue\0204\022\034\n\030StringHeaderTypeKey"
    "Value\0206\022\030\n\024StringHeaderTypeName\0208\022\030\n\024Str"
    "ingHeaderTypeHost\020:\022\034\n\030StringHeaderTypeQ"
    "uestion\020<\022\032\n\026StringHeaderTypeAnswer\020>\022\033\n"
    "\027StringHeaderTypeFriends\020@\022\031\n\025StringHead"
    "erTypeValue\020B\022\037\n\033StringHeaderTypeMaskedU"
    "user\020D\022\027\n\023StringHeaderTypeKey\020F\022\032\n\026Strin"
    "gHeaderTypeCarbon\020H\022\030\n\024StringHeaderTypeM"
    "ode\020L*\261\006\n\020IQMessageKeyType\022\r\n\tIQKeyBind\020"
    "\001\022\022\n\016IQKeyMucCreate\020\002\022\024\n\020IQKeyMucCreateV"
    "2\020\003\022\024\n\020IQKeyMucInviteV2\020\004\022\023\n\017IQKeyGetMuc"
    "User\020\005\022\023\n\017IQKeySetMucUser\020\006\022\023\n\017IQKeyDelM"
    "ucUser\020\007\022\031\n\025IQKeyAddUserSubscribe\020\010\022\031\n\025I"
    "QKeyDelUserSubscribe\020\t\022\031\n\025IQKeyGetUserSu"
    "bScribe\020\n\022\033\n\027IQKeyGetVerifyFriendOpt\020\013\022\033"
    "\n\027IQKeySetVerifyFriendOpt\020\014\022\033\n\027IQKeySetU"
    "serSubScribeV2\020\r\022\033\n\027IQKeyGetUserSubScrib"
    "eV2\020\016\022\026\n\022IQKeyGetUserFriend\020\020\022\023\n\017IQKeyGe"
    "tRequest\020\021\022\026\n\022IQKeyDelUserFriend\020\022\022\023\n\017IQ"
    "KeyGetUserKey\020\024\022\024\n\020IQKeyGetUserMask\020\026\022\024\n"
    "\020IQKeySetUserMask\020\030\022\027\n\023IQKeyCancelUSerMa"
    "sk\020\032\022\021\n\rIQKeySetAdmin\020\034\022\022\n\016IQKeySetMembe"
    "r\020\036\022\025\n\021IQKeyCancelMember\020 \022\024\n\020IQKeyGetUs"
    "erMucs\020$\022\023\n\017IQKeyDestroyMuc\020(\022\r\n\tIQKeyPi"
    "ng\0202\022\020\n\014IQKeyAddPush\0204\022\023\n\017IQKeyCancelPus"
    "h\020<\022\017\n\013IQKeyResult\020P\022\016\n\nIQKeyError\020Z\022\021\n\r"
    "IQKeyGetVUser\020\\\022\025\n\021IQKeyGetVUserRole\020^\022\025"
    "\n\021IQKeyStartSession\020`\022\023\n\017IQKeyEndSession"
    "\020b\022\025\n\021IQKeySessionEvent\020c*o\n\rStreamEndCo"
    "de\022\034\n\030StreamEndCodeReloginBase\020d\022\037\n\033Stre"
    "amEndCodeReloginFromNav\020e\022\037\n\032StreamEndCo"
    "deNoReloginBase\020\310\001*\341\003\n\014CategoryType\022\032\n\026C"
    "ategoryOrganizational\020\001\022\027\n\023CategorySessi"
    "onList\020\002\022\026\n\022CategoryNavigation\020\003\022\033\n\027Cate"
    "goryOPSNotification\020\004\022\026\n\022CategoryConfigS"
    "ync\020\006\022\025\n\021CategoryMsgNotify\020\007\022\030\n\024Category"
    "CalendarSync\020\010\022\034\n\030CategoryOnlineClientSy"
    "nc\020\t\022\022\n\016CategoryAskLog\020\n\022\037\n\033CategoryClie"
    "ntSpecialNotice\020\013\022\024\n\020CategoryTickUser\020d\022"
    "\036\n\032CategoryGlobalNotification\020b\022\037\n\033Categ"
    "orySpecifyNotification\020c\022\033\n\027CategoryWork"
    "WorldNotice\020\014\022\027\n\023CategoryHotLineSync\020\r\022\031"
    "\n\025CategoryMedalListSync\020\016\022#\n\037CategoryMed"
    "alUserStatusListSync\020\017*\267\001\n\017PresenceKeyTy"
    "pe\022\027\n\023PresenceKeyPriority\020\001\022\033\n\027PresenceK"
    "eyVerifyFriend\020\002\022*\n&PresenceKeyManualAut"
    "henticationConfirm\020\003\022\025\n\021PresenceKeyResul"
    "t\020\006\022\025\n\021PresenceKeyNotify\020\007\022\024\n\020PresenceKe"
    "yError\020\010", 7728);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  MessageKeyValue::default_instance_ = new MessageKeyValue();
  StringHeader::default_instance_ = new StringHeader();
  PackageLength::default_instance_ = new PackageLength();
  ProtoHeader::default_instance_ = new ProtoHeader();
  AuthMessage::default_instance_ = new AuthMessage();
  WelcomeMessage::default_instance_ = new WelcomeMessage();
  StreamBegin::default_instance_ = new StreamBegin();
  StartTLS::default_instance_ = new StartTLS();
  ProceedTLS::default_instance_ = new ProceedTLS();
  StreamEnd::default_instance_ = new StreamEnd();
  UserConnect::default_instance_ = new UserConnect();
  Capability::default_instance_ = new Capability();
  ResponseSucceeded::default_instance_ = new ResponseSucceeded();
  ResponseFailure::default_instance_ = new ResponseFailure();
  ProtoMessage::default_instance_ = new ProtoMessage();
  MessageBody::default_instance_ = new MessageBody();
  IQMessage::default_instance_ = new IQMessage();
  PresenceMessage::default_instance_ = new PresenceMessage();
  XmppMessage::default_instance_ = new XmppMessage();
  MessageKeyValue::default_instance_->InitAsDefaultInstance();
  StringHeader::default_instance_->InitAsDefaultInstance();
  PackageLength::default_instance_->InitAsDefaultInstance();
  ProtoHeader::default_instance_->InitAsDefaultInstance();
  AuthMessage::default_instance_->InitAsDefaultInstance();
  WelcomeMessage::default_instance_->InitAsDefaultInstance();
  StreamBegin::default_instance_->InitAsDefaultInstance();
  StartTLS::default_instance_->InitAsDefaultInstance();
  ProceedTLS::default_instance_->InitAsDefaultInstance();
  StreamEnd::default_instance_->InitAsDefaultInstance();
  UserConnect::default_instance_->InitAsDefaultInstance();
  Capability::default_instance_->InitAsDefaultInstance();
  ResponseSucceeded::default_instance_->InitAsDefaultInstance();
  ResponseFailure::default_instance_->InitAsDefaultInstance();
  ProtoMessage::default_instance_->InitAsDefaultInstance();
  MessageBody::default_instance_->InitAsDefaultInstance();
  IQMessage::default_instance_->InitAsDefaultInstance();
  PresenceMessage::default_instance_->InitAsDefaultInstance();
  XmppMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* SignalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalType_descriptor_;
}
bool SignalType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 20:
    case 30:
    case 45:
    case 50:
    case 51:
    case 100:
    case 101:
    case 102:
    case 106:
    case 108:
    case 110:
    case 128:
    case 132:
    case 136:
    case 140:
    case 141:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientType_descriptor_;
}
bool ClientType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case -11:
    case -2:
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 20:
    case 21:
    case 30:
    case 32:
    case 47:
    case 64:
    case 101:
    case 128:
    case 256:
    case 257:
    case 258:
    case 259:
    case 404:
    case 511:
    case 512:
    case 513:
    case 666:
    case 888:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1024:
    case 1025:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 3001:
    case 4096:
    case 5001:
    case 8192:
    case 10081:
    case 65501:
    case 65505:
    case 65506:
    case 65534:
    case 65535:
    case 65536:
    case 65537:
    case 65538:
    case 65550:
    case 65551:
    case 131072:
    case 134217728:
    case 268435456:
    case 268435457:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StringHeaderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringHeaderType_descriptor_;
}
bool StringHeaderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 16:
    case 18:
    case 20:
    case 22:
    case 24:
    case 28:
    case 30:
    case 32:
    case 34:
    case 36:
    case 38:
    case 40:
    case 42:
    case 50:
    case 52:
    case 54:
    case 56:
    case 58:
    case 60:
    case 62:
    case 64:
    case 66:
    case 68:
    case 70:
    case 72:
    case 76:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IQMessageKeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IQMessageKeyType_descriptor_;
}
bool IQMessageKeyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 20:
    case 22:
    case 24:
    case 26:
    case 28:
    case 30:
    case 32:
    case 36:
    case 40:
    case 50:
    case 52:
    case 60:
    case 80:
    case 90:
    case 92:
    case 94:
    case 96:
    case 98:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StreamEndCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamEndCode_descriptor_;
}
bool StreamEndCode_IsValid(int value) {
  switch(value) {
    case 100:
    case 101:
    case 200:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CategoryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CategoryType_descriptor_;
}
bool CategoryType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 98:
    case 99:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PresenceKeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PresenceKeyType_descriptor_;
}
bool PresenceKeyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MessageKeyValue::kKeyFieldNumber;
const int MessageKeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

MessageKeyValue::MessageKeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageKeyValue)
}

void MessageKeyValue::InitAsDefaultInstance() {
}

MessageKeyValue::MessageKeyValue(const MessageKeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageKeyValue)
}

void MessageKeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageKeyValue::~MessageKeyValue() {
  // @@protoc_insertion_point(destructor:MessageKeyValue)
  SharedDtor();
}

void MessageKeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MessageKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageKeyValue_descriptor_;
}

const MessageKeyValue& MessageKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

MessageKeyValue* MessageKeyValue::default_instance_ = NULL;

MessageKeyValue* MessageKeyValue::New() const {
  return new MessageKeyValue;
}

void MessageKeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageKeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageKeyValue)
  return false;
#undef DO_
}

void MessageKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageKeyValue)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageKeyValue)
}

::google::protobuf::uint8* MessageKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageKeyValue)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageKeyValue)
  return target;
}

int MessageKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageKeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageKeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageKeyValue::MergeFrom(const MessageKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageKeyValue::CopyFrom(const MessageKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageKeyValue::IsInitialized() const {

  return true;
}

void MessageKeyValue::Swap(MessageKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageKeyValue_descriptor_;
  metadata.reflection = MessageKeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringHeader::kParamsFieldNumber;
const int StringHeader::kKeyFieldNumber;
const int StringHeader::kValueFieldNumber;
const int StringHeader::kDefinedKeyFieldNumber;
#endif  // !_MSC_VER

StringHeader::StringHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StringHeader)
}

void StringHeader::InitAsDefaultInstance() {
}

StringHeader::StringHeader(const StringHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StringHeader)
}

void StringHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  definedkey_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringHeader::~StringHeader() {
  // @@protoc_insertion_point(destructor:StringHeader)
  SharedDtor();
}

void StringHeader::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void StringHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringHeader_descriptor_;
}

const StringHeader& StringHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

StringHeader* StringHeader::default_instance_ = NULL;

StringHeader* StringHeader::New() const {
  return new StringHeader;
}

void StringHeader::Clear() {
  if (_has_bits_[0 / 32] & 14) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    definedkey_ = 1;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StringHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MessageKeyValue params = 1;
      case 1: {
        if (tag == 10) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_params;
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_definedKey;
        break;
      }

      // optional .StringHeaderType definedKey = 4;
      case 4: {
        if (tag == 32) {
         parse_definedKey:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StringHeaderType_IsValid(value)) {
            set_definedkey(static_cast< ::StringHeaderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StringHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StringHeader)
  return false;
#undef DO_
}

void StringHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StringHeader)
  // repeated .MessageKeyValue params = 1;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(i), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // optional .StringHeaderType definedKey = 4;
  if (has_definedkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->definedkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StringHeader)
}

::google::protobuf::uint8* StringHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StringHeader)
  // repeated .MessageKeyValue params = 1;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(i), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // optional .StringHeaderType definedKey = 4;
  if (has_definedkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->definedkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StringHeader)
  return target;
}

int StringHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .StringHeaderType definedKey = 4;
    if (has_definedkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->definedkey());
    }

  }
  // repeated .MessageKeyValue params = 1;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringHeader::MergeFrom(const StringHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_definedkey()) {
      set_definedkey(from.definedkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringHeader::CopyFrom(const StringHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringHeader::IsInitialized() const {

  return true;
}

void StringHeader::Swap(StringHeader* other) {
  if (other != this) {
    params_.Swap(&other->params_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(definedkey_, other->definedkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringHeader_descriptor_;
  metadata.reflection = StringHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageLength::kLengthFieldNumber;
#endif  // !_MSC_VER

PackageLength::PackageLength()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PackageLength)
}

void PackageLength::InitAsDefaultInstance() {
}

PackageLength::PackageLength(const PackageLength& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PackageLength)
}

void PackageLength::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageLength::~PackageLength() {
  // @@protoc_insertion_point(destructor:PackageLength)
  SharedDtor();
}

void PackageLength::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageLength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageLength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageLength_descriptor_;
}

const PackageLength& PackageLength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

PackageLength* PackageLength::default_instance_ = NULL;

PackageLength* PackageLength::New() const {
  return new PackageLength;
}

void PackageLength::Clear() {
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageLength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PackageLength)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 length = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PackageLength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PackageLength)
  return false;
#undef DO_
}

void PackageLength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PackageLength)
  // optional int32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PackageLength)
}

::google::protobuf::uint8* PackageLength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PackageLength)
  // optional int32 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PackageLength)
  return target;
}

int PackageLength::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageLength::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageLength* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageLength*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageLength::MergeFrom(const PackageLength& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageLength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageLength::CopyFrom(const PackageLength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageLength::IsInitialized() const {

  return true;
}

void PackageLength::Swap(PackageLength* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageLength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageLength_descriptor_;
  metadata.reflection = PackageLength_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoHeader::kVersionFieldNumber;
const int ProtoHeader::kOptionsFieldNumber;
const int ProtoHeader::kOptionlistFieldNumber;
const int ProtoHeader::kLengthFieldNumber;
const int ProtoHeader::kContentFieldNumber;
const int ProtoHeader::kMessageFieldNumber;
#endif  // !_MSC_VER

ProtoHeader::ProtoHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoHeader)
}

void ProtoHeader::InitAsDefaultInstance() {
}

ProtoHeader::ProtoHeader(const ProtoHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoHeader)
}

void ProtoHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  options_ = 0;
  length_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoHeader::~ProtoHeader() {
  // @@protoc_insertion_point(destructor:ProtoHeader)
  SharedDtor();
}

void ProtoHeader::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ProtoHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoHeader_descriptor_;
}

const ProtoHeader& ProtoHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ProtoHeader* ProtoHeader::default_instance_ = NULL;

ProtoHeader* ProtoHeader::New() const {
  return new ProtoHeader;
}

void ProtoHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtoHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(version_, options_);
    length_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  optionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_options;
        break;
      }

      // optional int32 options = 2;
      case 2: {
        if (tag == 16) {
         parse_options:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &options_)));
          set_has_options();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_optionlist;
        break;
      }

      // repeated int32 optionlist = 3;
      case 3: {
        if (tag == 24) {
         parse_optionlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_optionlist())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_optionlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_optionlist;
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // optional int32 length = 4;
      case 4: {
        if (tag == 32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_message;
        break;
      }

      // optional bytes message = 6;
      case 6: {
        if (tag == 50) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoHeader)
  return false;
#undef DO_
}

void ProtoHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoHeader)
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->options(), output);
  }

  // repeated int32 optionlist = 3;
  for (int i = 0; i < this->optionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->optionlist(i), output);
  }

  // optional int32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // optional bytes message = 6;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoHeader)
}

::google::protobuf::uint8* ProtoHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoHeader)
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->options(), target);
  }

  // repeated int32 optionlist = 3;
  for (int i = 0; i < this->optionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->optionlist(i), target);
  }

  // optional int32 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional bytes message = 6;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoHeader)
  return target;
}

int ProtoHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->options());
    }

    // optional int32 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional bytes message = 6;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  // repeated int32 optionlist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->optionlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->optionlist(i));
    }
    total_size += 1 * this->optionlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoHeader::MergeFrom(const ProtoHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  optionlist_.MergeFrom(from.optionlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_options()) {
      set_options(from.options());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoHeader::CopyFrom(const ProtoHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoHeader::IsInitialized() const {

  return true;
}

void ProtoHeader::Swap(ProtoHeader* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(options_, other->options_);
    optionlist_.Swap(&other->optionlist_);
    std::swap(length_, other->length_);
    std::swap(content_, other->content_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoHeader_descriptor_;
  metadata.reflection = ProtoHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthMessage::kMechanismFieldNumber;
const int AuthMessage::kMethodFieldNumber;
const int AuthMessage::kMsgIdFieldNumber;
const int AuthMessage::kAuthKeyFieldNumber;
const int AuthMessage::kOtherBodyFieldNumber;
#endif  // !_MSC_VER

AuthMessage::AuthMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthMessage)
}

void AuthMessage::InitAsDefaultInstance() {
  otherbody_ = const_cast< ::MessageBody*>(&::MessageBody::default_instance());
}

AuthMessage::AuthMessage(const AuthMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthMessage)
}

void AuthMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mechanism_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherbody_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthMessage::~AuthMessage() {
  // @@protoc_insertion_point(destructor:AuthMessage)
  SharedDtor();
}

void AuthMessage::SharedDtor() {
  if (mechanism_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mechanism_;
  }
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (msgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgid_;
  }
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authkey_;
  }
  if (this != default_instance_) {
    delete otherbody_;
  }
}

void AuthMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthMessage_descriptor_;
}

const AuthMessage& AuthMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

AuthMessage* AuthMessage::default_instance_ = NULL;

AuthMessage* AuthMessage::New() const {
  return new AuthMessage;
}

void AuthMessage::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_mechanism()) {
      if (mechanism_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mechanism_->clear();
      }
    }
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_->clear();
      }
    }
    if (has_msgid()) {
      if (msgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgid_->clear();
      }
    }
    if (has_authkey()) {
      if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authkey_->clear();
      }
    }
    if (has_otherbody()) {
      if (otherbody_ != NULL) otherbody_->::MessageBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AuthMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mechanism = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mechanism()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mechanism().data(), this->mechanism().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mechanism");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_method;
        break;
      }

      // optional string method = 2;
      case 2: {
        if (tag == 18) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msgId;
        break;
      }

      // optional string msgId = 3;
      case 3: {
        if (tag == 26) {
         parse_msgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_authKey;
        break;
      }

      // optional string authKey = 4;
      case 4: {
        if (tag == 34) {
         parse_authKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_otherBody;
        break;
      }

      // optional .MessageBody otherBody = 5;
      case 5: {
        if (tag == 42) {
         parse_otherBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_otherbody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthMessage)
  return false;
#undef DO_
}

void AuthMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthMessage)
  // optional string mechanism = 1;
  if (has_mechanism()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mechanism().data(), this->mechanism().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mechanism");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mechanism(), output);
  }

  // optional string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method(), output);
  }

  // optional string msgId = 3;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msgid(), output);
  }

  // optional string authKey = 4;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->authkey(), output);
  }

  // optional .MessageBody otherBody = 5;
  if (has_otherbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->otherbody(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AuthMessage)
}

::google::protobuf::uint8* AuthMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthMessage)
  // optional string mechanism = 1;
  if (has_mechanism()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mechanism().data(), this->mechanism().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mechanism");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mechanism(), target);
  }

  // optional string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method(), target);
  }

  // optional string msgId = 3;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgid(), target);
  }

  // optional string authKey = 4;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->authkey(), target);
  }

  // optional .MessageBody otherBody = 5;
  if (has_otherbody()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->otherbody(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthMessage)
  return target;
}

int AuthMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mechanism = 1;
    if (has_mechanism()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mechanism());
    }

    // optional string method = 2;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // optional string msgId = 3;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }

    // optional string authKey = 4;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

    // optional .MessageBody otherBody = 5;
    if (has_otherbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->otherbody());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthMessage::MergeFrom(const AuthMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mechanism()) {
      set_mechanism(from.mechanism());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_authkey()) {
      set_authkey(from.authkey());
    }
    if (from.has_otherbody()) {
      mutable_otherbody()->::MessageBody::MergeFrom(from.otherbody());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthMessage::CopyFrom(const AuthMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthMessage::IsInitialized() const {

  return true;
}

void AuthMessage::Swap(AuthMessage* other) {
  if (other != this) {
    std::swap(mechanism_, other->mechanism_);
    std::swap(method_, other->method_);
    std::swap(msgid_, other->msgid_);
    std::swap(authkey_, other->authkey_);
    std::swap(otherbody_, other->otherbody_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthMessage_descriptor_;
  metadata.reflection = AuthMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelcomeMessage::kDomainFieldNumber;
const int WelcomeMessage::kVersionFieldNumber;
const int WelcomeMessage::kUserFieldNumber;
const int WelcomeMessage::kSockmodFieldNumber;
#endif  // !_MSC_VER

WelcomeMessage::WelcomeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WelcomeMessage)
}

void WelcomeMessage::InitAsDefaultInstance() {
}

WelcomeMessage::WelcomeMessage(const WelcomeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WelcomeMessage)
}

void WelcomeMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sockmod_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelcomeMessage::~WelcomeMessage() {
  // @@protoc_insertion_point(destructor:WelcomeMessage)
  SharedDtor();
}

void WelcomeMessage::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (sockmod_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sockmod_;
  }
  if (this != default_instance_) {
  }
}

void WelcomeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelcomeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelcomeMessage_descriptor_;
}

const WelcomeMessage& WelcomeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

WelcomeMessage* WelcomeMessage::default_instance_ = NULL;

WelcomeMessage* WelcomeMessage::New() const {
  return new WelcomeMessage;
}

void WelcomeMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
    if (has_sockmod()) {
      if (sockmod_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sockmod_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelcomeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WelcomeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional string user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sockmod;
        break;
      }

      // optional string sockmod = 4;
      case 4: {
        if (tag == 34) {
         parse_sockmod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sockmod()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sockmod().data(), this->sockmod().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sockmod");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WelcomeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WelcomeMessage)
  return false;
#undef DO_
}

void WelcomeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WelcomeMessage)
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user(), output);
  }

  // optional string sockmod = 4;
  if (has_sockmod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sockmod().data(), this->sockmod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sockmod");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sockmod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WelcomeMessage)
}

::google::protobuf::uint8* WelcomeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WelcomeMessage)
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // optional string sockmod = 4;
  if (has_sockmod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sockmod().data(), this->sockmod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sockmod");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sockmod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WelcomeMessage)
  return target;
}

int WelcomeMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string sockmod = 4;
    if (has_sockmod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sockmod());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelcomeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelcomeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelcomeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelcomeMessage::MergeFrom(const WelcomeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_sockmod()) {
      set_sockmod(from.sockmod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelcomeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelcomeMessage::CopyFrom(const WelcomeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelcomeMessage::IsInitialized() const {

  return true;
}

void WelcomeMessage::Swap(WelcomeMessage* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(version_, other->version_);
    std::swap(user_, other->user_);
    std::swap(sockmod_, other->sockmod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelcomeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelcomeMessage_descriptor_;
  metadata.reflection = WelcomeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamBegin::kDomainFieldNumber;
const int StreamBegin::kVersionFieldNumber;
const int StreamBegin::kBodysFieldNumber;
#endif  // !_MSC_VER

StreamBegin::StreamBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamBegin)
}

void StreamBegin::InitAsDefaultInstance() {
}

StreamBegin::StreamBegin(const StreamBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StreamBegin)
}

void StreamBegin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamBegin::~StreamBegin() {
  // @@protoc_insertion_point(destructor:StreamBegin)
  SharedDtor();
}

void StreamBegin::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void StreamBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamBegin_descriptor_;
}

const StreamBegin& StreamBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

StreamBegin* StreamBegin::default_instance_ = NULL;

StreamBegin* StreamBegin::New() const {
  return new StreamBegin;
}

void StreamBegin::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }
  bodys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamBegin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bodys;
        break;
      }

      // repeated .MessageBody bodys = 3;
      case 3: {
        if (tag == 26) {
         parse_bodys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bodys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bodys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StreamBegin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamBegin)
  return false;
#undef DO_
}

void StreamBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamBegin)
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // repeated .MessageBody bodys = 3;
  for (int i = 0; i < this->bodys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bodys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StreamBegin)
}

::google::protobuf::uint8* StreamBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StreamBegin)
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // repeated .MessageBody bodys = 3;
  for (int i = 0; i < this->bodys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bodys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StreamBegin)
  return target;
}

int StreamBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  // repeated .MessageBody bodys = 3;
  total_size += 1 * this->bodys_size();
  for (int i = 0; i < this->bodys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bodys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamBegin::MergeFrom(const StreamBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  bodys_.MergeFrom(from.bodys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamBegin::CopyFrom(const StreamBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamBegin::IsInitialized() const {

  return true;
}

void StreamBegin::Swap(StreamBegin* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(version_, other->version_);
    bodys_.Swap(&other->bodys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamBegin_descriptor_;
  metadata.reflection = StreamBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StartTLS::StartTLS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartTLS)
}

void StartTLS::InitAsDefaultInstance() {
}

StartTLS::StartTLS(const StartTLS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StartTLS)
}

void StartTLS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartTLS::~StartTLS() {
  // @@protoc_insertion_point(destructor:StartTLS)
  SharedDtor();
}

void StartTLS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartTLS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartTLS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartTLS_descriptor_;
}

const StartTLS& StartTLS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

StartTLS* StartTLS::default_instance_ = NULL;

StartTLS* StartTLS::New() const {
  return new StartTLS;
}

void StartTLS::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartTLS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StartTLS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:StartTLS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartTLS)
  return false;
#undef DO_
}

void StartTLS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartTLS)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StartTLS)
}

::google::protobuf::uint8* StartTLS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartTLS)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartTLS)
  return target;
}

int StartTLS::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartTLS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartTLS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartTLS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartTLS::MergeFrom(const StartTLS& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartTLS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartTLS::CopyFrom(const StartTLS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTLS::IsInitialized() const {

  return true;
}

void StartTLS::Swap(StartTLS* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartTLS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartTLS_descriptor_;
  metadata.reflection = StartTLS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProceedTLS::ProceedTLS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProceedTLS)
}

void ProceedTLS::InitAsDefaultInstance() {
}

ProceedTLS::ProceedTLS(const ProceedTLS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProceedTLS)
}

void ProceedTLS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProceedTLS::~ProceedTLS() {
  // @@protoc_insertion_point(destructor:ProceedTLS)
  SharedDtor();
}

void ProceedTLS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProceedTLS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProceedTLS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProceedTLS_descriptor_;
}

const ProceedTLS& ProceedTLS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ProceedTLS* ProceedTLS::default_instance_ = NULL;

ProceedTLS* ProceedTLS::New() const {
  return new ProceedTLS;
}

void ProceedTLS::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProceedTLS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProceedTLS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProceedTLS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProceedTLS)
  return false;
#undef DO_
}

void ProceedTLS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProceedTLS)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProceedTLS)
}

::google::protobuf::uint8* ProceedTLS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProceedTLS)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProceedTLS)
  return target;
}

int ProceedTLS::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProceedTLS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProceedTLS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProceedTLS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProceedTLS::MergeFrom(const ProceedTLS& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProceedTLS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProceedTLS::CopyFrom(const ProceedTLS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProceedTLS::IsInitialized() const {

  return true;
}

void ProceedTLS::Swap(ProceedTLS* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProceedTLS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProceedTLS_descriptor_;
  metadata.reflection = ProceedTLS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamEnd::kReasonFieldNumber;
const int StreamEnd::kCodeFieldNumber;
#endif  // !_MSC_VER

StreamEnd::StreamEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamEnd)
}

void StreamEnd::InitAsDefaultInstance() {
}

StreamEnd::StreamEnd(const StreamEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StreamEnd)
}

void StreamEnd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamEnd::~StreamEnd() {
  // @@protoc_insertion_point(destructor:StreamEnd)
  SharedDtor();
}

void StreamEnd::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void StreamEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamEnd_descriptor_;
}

const StreamEnd& StreamEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

StreamEnd* StreamEnd::default_instance_ = NULL;

StreamEnd* StreamEnd::New() const {
  return new StreamEnd;
}

void StreamEnd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StreamEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamEnd)
  return false;
#undef DO_
}

void StreamEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamEnd)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StreamEnd)
}

::google::protobuf::uint8* StreamEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StreamEnd)
  // optional string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StreamEnd)
  return target;
}

int StreamEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamEnd::MergeFrom(const StreamEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamEnd::CopyFrom(const StreamEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamEnd::IsInitialized() const {

  return true;
}

void StreamEnd::Swap(StreamEnd* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamEnd_descriptor_;
  metadata.reflection = StreamEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserConnect::kDomainFieldNumber;
const int UserConnect::kVersionFieldNumber;
#endif  // !_MSC_VER

UserConnect::UserConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserConnect)
}

void UserConnect::InitAsDefaultInstance() {
}

UserConnect::UserConnect(const UserConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserConnect)
}

void UserConnect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserConnect::~UserConnect() {
  // @@protoc_insertion_point(destructor:UserConnect)
  SharedDtor();
}

void UserConnect::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void UserConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserConnect_descriptor_;
}

const UserConnect& UserConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

UserConnect* UserConnect::default_instance_ = NULL;

UserConnect* UserConnect::New() const {
  return new UserConnect;
}

void UserConnect::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserConnect)
  return false;
#undef DO_
}

void UserConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserConnect)
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserConnect)
}

::google::protobuf::uint8* UserConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserConnect)
  // optional string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserConnect)
  return target;
}

int UserConnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserConnect::MergeFrom(const UserConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserConnect::CopyFrom(const UserConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConnect::IsInitialized() const {

  return true;
}

void UserConnect::Swap(UserConnect* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserConnect_descriptor_;
  metadata.reflection = UserConnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Capability::kVersionFieldNumber;
const int Capability::kBodysFieldNumber;
#endif  // !_MSC_VER

Capability::Capability()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Capability)
}

void Capability::InitAsDefaultInstance() {
  bodys_ = const_cast< ::MessageBody*>(&::MessageBody::default_instance());
}

Capability::Capability(const Capability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Capability)
}

void Capability::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodys_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:Capability)
  SharedDtor();
}

void Capability::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
    delete bodys_;
  }
}

void Capability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Capability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Capability_descriptor_;
}

const Capability& Capability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Capability* Capability::default_instance_ = NULL;

Capability* Capability::New() const {
  return new Capability;
}

void Capability::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_bodys()) {
      if (bodys_ != NULL) bodys_->::MessageBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Capability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Capability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bodys;
        break;
      }

      // optional .MessageBody bodys = 2;
      case 2: {
        if (tag == 18) {
         parse_bodys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bodys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Capability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Capability)
  return false;
#undef DO_
}

void Capability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Capability)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional .MessageBody bodys = 2;
  if (has_bodys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bodys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Capability)
}

::google::protobuf::uint8* Capability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Capability)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional .MessageBody bodys = 2;
  if (has_bodys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bodys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Capability)
  return target;
}

int Capability::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .MessageBody bodys = 2;
    if (has_bodys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bodys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Capability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Capability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Capability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Capability::MergeFrom(const Capability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bodys()) {
      mutable_bodys()->::MessageBody::MergeFrom(from.bodys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Capability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capability::CopyFrom(const Capability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {

  return true;
}

void Capability::Swap(Capability* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(bodys_, other->bodys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Capability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Capability_descriptor_;
  metadata.reflection = Capability_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseSucceeded::kCodeFieldNumber;
const int ResponseSucceeded::kMsgIdFieldNumber;
const int ResponseSucceeded::kInfoFieldNumber;
const int ResponseSucceeded::kBodyFieldNumber;
#endif  // !_MSC_VER

ResponseSucceeded::ResponseSucceeded()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResponseSucceeded)
}

void ResponseSucceeded::InitAsDefaultInstance() {
  body_ = const_cast< ::MessageBody*>(&::MessageBody::default_instance());
}

ResponseSucceeded::ResponseSucceeded(const ResponseSucceeded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ResponseSucceeded)
}

void ResponseSucceeded::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSucceeded::~ResponseSucceeded() {
  // @@protoc_insertion_point(destructor:ResponseSucceeded)
  SharedDtor();
}

void ResponseSucceeded::SharedDtor() {
  if (msgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgid_;
  }
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
    delete body_;
  }
}

void ResponseSucceeded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSucceeded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSucceeded_descriptor_;
}

const ResponseSucceeded& ResponseSucceeded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ResponseSucceeded* ResponseSucceeded::default_instance_ = NULL;

ResponseSucceeded* ResponseSucceeded::New() const {
  return new ResponseSucceeded;
}

void ResponseSucceeded::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    code_ = 0;
    if (has_msgid()) {
      if (msgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgid_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
    if (has_body()) {
      if (body_ != NULL) body_->::MessageBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseSucceeded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResponseSucceeded)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msgId;
        break;
      }

      // optional string msgId = 2;
      case 2: {
        if (tag == 18) {
         parse_msgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional string info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_body;
        break;
      }

      // optional .MessageBody body = 4;
      case 4: {
        if (tag == 34) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResponseSucceeded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResponseSucceeded)
  return false;
#undef DO_
}

void ResponseSucceeded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResponseSucceeded)
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string msgId = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msgid(), output);
  }

  // optional string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->info(), output);
  }

  // optional .MessageBody body = 4;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ResponseSucceeded)
}

::google::protobuf::uint8* ResponseSucceeded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResponseSucceeded)
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string msgId = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgid(), target);
  }

  // optional string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->info(), target);
  }

  // optional .MessageBody body = 4;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResponseSucceeded)
  return target;
}

int ResponseSucceeded::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string msgId = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }

    // optional string info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional .MessageBody body = 4;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSucceeded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseSucceeded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseSucceeded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseSucceeded::MergeFrom(const ResponseSucceeded& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_body()) {
      mutable_body()->::MessageBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseSucceeded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSucceeded::CopyFrom(const ResponseSucceeded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSucceeded::IsInitialized() const {

  return true;
}

void ResponseSucceeded::Swap(ResponseSucceeded* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msgid_, other->msgid_);
    std::swap(info_, other->info_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseSucceeded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSucceeded_descriptor_;
  metadata.reflection = ResponseSucceeded_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseFailure::kCodeFieldNumber;
const int ResponseFailure::kMsgIdFieldNumber;
const int ResponseFailure::kErrorFieldNumber;
const int ResponseFailure::kBodyFieldNumber;
#endif  // !_MSC_VER

ResponseFailure::ResponseFailure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResponseFailure)
}

void ResponseFailure::InitAsDefaultInstance() {
  body_ = const_cast< ::MessageBody*>(&::MessageBody::default_instance());
}

ResponseFailure::ResponseFailure(const ResponseFailure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ResponseFailure)
}

void ResponseFailure::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseFailure::~ResponseFailure() {
  // @@protoc_insertion_point(destructor:ResponseFailure)
  SharedDtor();
}

void ResponseFailure::SharedDtor() {
  if (msgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgid_;
  }
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
    delete body_;
  }
}

void ResponseFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFailure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseFailure_descriptor_;
}

const ResponseFailure& ResponseFailure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ResponseFailure* ResponseFailure::default_instance_ = NULL;

ResponseFailure* ResponseFailure::New() const {
  return new ResponseFailure;
}

void ResponseFailure::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    code_ = 0;
    if (has_msgid()) {
      if (msgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgid_->clear();
      }
    }
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    if (has_body()) {
      if (body_ != NULL) body_->::MessageBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResponseFailure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msgId;
        break;
      }

      // optional string msgId = 2;
      case 2: {
        if (tag == 18) {
         parse_msgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional string error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_body;
        break;
      }

      // optional .MessageBody body = 4;
      case 4: {
        if (tag == 34) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResponseFailure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResponseFailure)
  return false;
#undef DO_
}

void ResponseFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResponseFailure)
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string msgId = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msgid(), output);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  // optional .MessageBody body = 4;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ResponseFailure)
}

::google::protobuf::uint8* ResponseFailure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResponseFailure)
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string msgId = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgid(), target);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  // optional .MessageBody body = 4;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResponseFailure)
  return target;
}

int ResponseFailure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string msgId = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }

    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional .MessageBody body = 4;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFailure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseFailure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseFailure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseFailure::MergeFrom(const ResponseFailure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_body()) {
      mutable_body()->::MessageBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseFailure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFailure::CopyFrom(const ResponseFailure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFailure::IsInitialized() const {

  return true;
}

void ResponseFailure::Swap(ResponseFailure* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msgid_, other->msgid_);
    std::swap(error_, other->error_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseFailure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseFailure_descriptor_;
  metadata.reflection = ResponseFailure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMessage::kOptionsFieldNumber;
const int ProtoMessage::kSignalTypeFieldNumber;
const int ProtoMessage::kFromFieldNumber;
const int ProtoMessage::kToFieldNumber;
const int ProtoMessage::kMessageFieldNumber;
const int ProtoMessage::kRealfromFieldNumber;
const int ProtoMessage::kRealtoFieldNumber;
const int ProtoMessage::kOriginfromFieldNumber;
const int ProtoMessage::kOrigintoFieldNumber;
const int ProtoMessage::kOrigintypeFieldNumber;
const int ProtoMessage::kSendjidFieldNumber;
#endif  // !_MSC_VER

ProtoMessage::ProtoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMessage)
}

void ProtoMessage::InitAsDefaultInstance() {
}

ProtoMessage::ProtoMessage(const ProtoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMessage)
}

void ProtoMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  options_ = 0;
  signaltype_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realfrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originfrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origintype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendjid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage::~ProtoMessage() {
  // @@protoc_insertion_point(destructor:ProtoMessage)
  SharedDtor();
}

void ProtoMessage::SharedDtor() {
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (realfrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete realfrom_;
  }
  if (realto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete realto_;
  }
  if (originfrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete originfrom_;
  }
  if (originto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete originto_;
  }
  if (origintype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete origintype_;
  }
  if (sendjid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendjid_;
  }
  if (this != default_instance_) {
  }
}

void ProtoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_descriptor_;
}

const ProtoMessage& ProtoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ProtoMessage* ProtoMessage::default_instance_ = NULL;

ProtoMessage* ProtoMessage::New() const {
  return new ProtoMessage;
}

void ProtoMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtoMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(options_, signaltype_);
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_realfrom()) {
      if (realfrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        realfrom_->clear();
      }
    }
    if (has_realto()) {
      if (realto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        realto_->clear();
      }
    }
    if (has_originfrom()) {
      if (originfrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        originfrom_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_originto()) {
      if (originto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        originto_->clear();
      }
    }
    if (has_origintype()) {
      if (origintype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        origintype_->clear();
      }
    }
    if (has_sendjid()) {
      if (sendjid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendjid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 options = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &options_)));
          set_has_options();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_signalType;
        break;
      }

      // required int32 signalType = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_signalType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signaltype_)));
          set_has_signaltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from;
        break;
      }

      // optional string from = 3;
      case 3: {
        if (tag == 26) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_to;
        break;
      }

      // optional string to = 4;
      case 4: {
        if (tag == 34) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_message;
        break;
      }

      // optional bytes message = 5;
      case 5: {
        if (tag == 42) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_realfrom;
        break;
      }

      // optional string realfrom = 6;
      case 6: {
        if (tag == 50) {
         parse_realfrom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realfrom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realfrom().data(), this->realfrom().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "realfrom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_realto;
        break;
      }

      // optional string realto = 7;
      case 7: {
        if (tag == 58) {
         parse_realto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realto().data(), this->realto().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "realto");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_originfrom;
        break;
      }

      // optional string originfrom = 8;
      case 8: {
        if (tag == 66) {
         parse_originfrom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originfrom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->originfrom().data(), this->originfrom().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "originfrom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_originto;
        break;
      }

      // optional string originto = 9;
      case 9: {
        if (tag == 74) {
         parse_originto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->originto().data(), this->originto().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "originto");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_origintype;
        break;
      }

      // optional string origintype = 10;
      case 10: {
        if (tag == 82) {
         parse_origintype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origintype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->origintype().data(), this->origintype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "origintype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sendjid;
        break;
      }

      // optional string sendjid = 11;
      case 11: {
        if (tag == 90) {
         parse_sendjid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendjid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendjid().data(), this->sendjid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sendjid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMessage)
  return false;
#undef DO_
}

void ProtoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMessage)
  // optional int32 options = 1;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->options(), output);
  }

  // required int32 signalType = 2 [default = 0];
  if (has_signaltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signaltype(), output);
  }

  // optional string from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from(), output);
  }

  // optional string to = 4;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to(), output);
  }

  // optional bytes message = 5;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->message(), output);
  }

  // optional string realfrom = 6;
  if (has_realfrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realfrom().data(), this->realfrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "realfrom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->realfrom(), output);
  }

  // optional string realto = 7;
  if (has_realto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realto().data(), this->realto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "realto");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->realto(), output);
  }

  // optional string originfrom = 8;
  if (has_originfrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originfrom().data(), this->originfrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "originfrom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->originfrom(), output);
  }

  // optional string originto = 9;
  if (has_originto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originto().data(), this->originto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "originto");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->originto(), output);
  }

  // optional string origintype = 10;
  if (has_origintype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origintype().data(), this->origintype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "origintype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->origintype(), output);
  }

  // optional string sendjid = 11;
  if (has_sendjid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendjid().data(), this->sendjid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendjid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sendjid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMessage)
}

::google::protobuf::uint8* ProtoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage)
  // optional int32 options = 1;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->options(), target);
  }

  // required int32 signalType = 2 [default = 0];
  if (has_signaltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signaltype(), target);
  }

  // optional string from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from(), target);
  }

  // optional string to = 4;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to(), target);
  }

  // optional bytes message = 5;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->message(), target);
  }

  // optional string realfrom = 6;
  if (has_realfrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realfrom().data(), this->realfrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "realfrom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->realfrom(), target);
  }

  // optional string realto = 7;
  if (has_realto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realto().data(), this->realto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "realto");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->realto(), target);
  }

  // optional string originfrom = 8;
  if (has_originfrom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originfrom().data(), this->originfrom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "originfrom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->originfrom(), target);
  }

  // optional string originto = 9;
  if (has_originto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originto().data(), this->originto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "originto");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->originto(), target);
  }

  // optional string origintype = 10;
  if (has_origintype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origintype().data(), this->origintype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "origintype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->origintype(), target);
  }

  // optional string sendjid = 11;
  if (has_sendjid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendjid().data(), this->sendjid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendjid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sendjid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage)
  return target;
}

int ProtoMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 options = 1;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->options());
    }

    // required int32 signalType = 2 [default = 0];
    if (has_signaltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signaltype());
    }

    // optional string from = 3;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // optional string to = 4;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

    // optional bytes message = 5;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional string realfrom = 6;
    if (has_realfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realfrom());
    }

    // optional string realto = 7;
    if (has_realto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realto());
    }

    // optional string originfrom = 8;
    if (has_originfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originfrom());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string originto = 9;
    if (has_originto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originto());
    }

    // optional string origintype = 10;
    if (has_origintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origintype());
    }

    // optional string sendjid = 11;
    if (has_sendjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendjid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage::MergeFrom(const ProtoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_options()) {
      set_options(from.options());
    }
    if (from.has_signaltype()) {
      set_signaltype(from.signaltype());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_realfrom()) {
      set_realfrom(from.realfrom());
    }
    if (from.has_realto()) {
      set_realto(from.realto());
    }
    if (from.has_originfrom()) {
      set_originfrom(from.originfrom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_originto()) {
      set_originto(from.originto());
    }
    if (from.has_origintype()) {
      set_origintype(from.origintype());
    }
    if (from.has_sendjid()) {
      set_sendjid(from.sendjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage::CopyFrom(const ProtoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ProtoMessage::Swap(ProtoMessage* other) {
  if (other != this) {
    std::swap(options_, other->options_);
    std::swap(signaltype_, other->signaltype_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(message_, other->message_);
    std::swap(realfrom_, other->realfrom_);
    std::swap(realto_, other->realto_);
    std::swap(originfrom_, other->originfrom_);
    std::swap(originto_, other->originto_);
    std::swap(origintype_, other->origintype_);
    std::swap(sendjid_, other->sendjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_descriptor_;
  metadata.reflection = ProtoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageBody::kHeadersFieldNumber;
const int MessageBody::kValueFieldNumber;
const int MessageBody::kBodysFieldNumber;
#endif  // !_MSC_VER

MessageBody::MessageBody()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageBody)
}

void MessageBody::InitAsDefaultInstance() {
}

MessageBody::MessageBody(const MessageBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageBody)
}

void MessageBody::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageBody::~MessageBody() {
  // @@protoc_insertion_point(destructor:MessageBody)
  SharedDtor();
}

void MessageBody::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MessageBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageBody_descriptor_;
}

const MessageBody& MessageBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

MessageBody* MessageBody::default_instance_ = NULL;

MessageBody* MessageBody::New() const {
  return new MessageBody;
}

void MessageBody::Clear() {
  if (has_value()) {
    if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      value_->clear();
    }
  }
  headers_.Clear();
  bodys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .StringHeader headers = 1;
      case 1: {
        if (tag == 10) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_headers;
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bodys;
        break;
      }

      // repeated .MessageBody bodys = 3;
      case 3: {
        if (tag == 26) {
         parse_bodys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bodys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bodys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageBody)
  return false;
#undef DO_
}

void MessageBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageBody)
  // repeated .StringHeader headers = 1;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->headers(i), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // repeated .MessageBody bodys = 3;
  for (int i = 0; i < this->bodys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bodys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageBody)
}

::google::protobuf::uint8* MessageBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageBody)
  // repeated .StringHeader headers = 1;
  for (int i = 0; i < this->headers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->headers(i), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // repeated .MessageBody bodys = 3;
  for (int i = 0; i < this->bodys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bodys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageBody)
  return target;
}

int MessageBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  // repeated .StringHeader headers = 1;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  // repeated .MessageBody bodys = 3;
  total_size += 1 * this->bodys_size();
  for (int i = 0; i < this->bodys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bodys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageBody::MergeFrom(const MessageBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  bodys_.MergeFrom(from.bodys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBody::CopyFrom(const MessageBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBody::IsInitialized() const {

  return true;
}

void MessageBody::Swap(MessageBody* other) {
  if (other != this) {
    headers_.Swap(&other->headers_);
    std::swap(value_, other->value_);
    bodys_.Swap(&other->bodys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageBody_descriptor_;
  metadata.reflection = MessageBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IQMessage::kNamespaceFieldNumber;
const int IQMessage::kKeyFieldNumber;
const int IQMessage::kValueFieldNumber;
const int IQMessage::kMessageIdFieldNumber;
const int IQMessage::kHeaderFieldNumber;
const int IQMessage::kBodyFieldNumber;
const int IQMessage::kReceivedTimeFieldNumber;
const int IQMessage::kTransferTimeFieldNumber;
const int IQMessage::kHeadersFieldNumber;
const int IQMessage::kBodysFieldNumber;
const int IQMessage::kDefinedKeyFieldNumber;
#endif  // !_MSC_VER

IQMessage::IQMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IQMessage)
}

void IQMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::StringHeader*>(&::StringHeader::default_instance());
  body_ = const_cast< ::MessageBody*>(&::MessageBody::default_instance());
}

IQMessage::IQMessage(const IQMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IQMessage)
}

void IQMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  body_ = NULL;
  receivedtime_ = GOOGLE_LONGLONG(0);
  transfertime_ = GOOGLE_LONGLONG(0);
  definedkey_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IQMessage::~IQMessage() {
  // @@protoc_insertion_point(destructor:IQMessage)
  SharedDtor();
}

void IQMessage::SharedDtor() {
  if (namespace__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete namespace__;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void IQMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IQMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IQMessage_descriptor_;
}

const IQMessage& IQMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

IQMessage* IQMessage::default_instance_ = NULL;

IQMessage* IQMessage::New() const {
  return new IQMessage;
}

void IQMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IQMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(receivedtime_, transfertime_);
    if (has_namespace_()) {
      if (namespace__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        namespace__->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messageid_->clear();
      }
    }
    if (has_header()) {
      if (header_ != NULL) header_->::StringHeader::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::MessageBody::Clear();
    }
  }
  definedkey_ = 1;

#undef OFFSET_OF_FIELD_
#undef ZR_

  headers_.Clear();
  bodys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IQMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IQMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string namespace = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "namespace_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_messageId;
        break;
      }

      // optional string messageId = 4;
      case 4: {
        if (tag == 34) {
         parse_messageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messageid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_header;
        break;
      }

      // optional .StringHeader header = 5;
      case 5: {
        if (tag == 42) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_body;
        break;
      }

      // optional .MessageBody body = 6;
      case 6: {
        if (tag == 50) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_receivedTime;
        break;
      }

      // optional int64 receivedTime = 7;
      case 7: {
        if (tag == 56) {
         parse_receivedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivedtime_)));
          set_has_receivedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_transferTime;
        break;
      }

      // optional int64 transferTime = 8;
      case 8: {
        if (tag == 64) {
         parse_transferTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transfertime_)));
          set_has_transfertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_headers;
        break;
      }

      // repeated .StringHeader headers = 9;
      case 9: {
        if (tag == 74) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_headers;
        if (input->ExpectTag(82)) goto parse_bodys;
        break;
      }

      // repeated .MessageBody bodys = 10;
      case 10: {
        if (tag == 82) {
         parse_bodys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bodys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_bodys;
        if (input->ExpectTag(88)) goto parse_definedKey;
        break;
      }

      // optional .IQMessageKeyType definedKey = 11;
      case 11: {
        if (tag == 88) {
         parse_definedKey:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IQMessageKeyType_IsValid(value)) {
            set_definedkey(static_cast< ::IQMessageKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IQMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IQMessage)
  return false;
#undef DO_
}

void IQMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IQMessage)
  // optional string namespace = 1;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "namespace_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->namespace_(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // optional string messageId = 4;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->messageid(), output);
  }

  // optional .StringHeader header = 5;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->header(), output);
  }

  // optional .MessageBody body = 6;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->body(), output);
  }

  // optional int64 receivedTime = 7;
  if (has_receivedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->receivedtime(), output);
  }

  // optional int64 transferTime = 8;
  if (has_transfertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->transfertime(), output);
  }

  // repeated .StringHeader headers = 9;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->headers(i), output);
  }

  // repeated .MessageBody bodys = 10;
  for (int i = 0; i < this->bodys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bodys(i), output);
  }

  // optional .IQMessageKeyType definedKey = 11;
  if (has_definedkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->definedkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IQMessage)
}

::google::protobuf::uint8* IQMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IQMessage)
  // optional string namespace = 1;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "namespace_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespace_(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // optional string messageId = 4;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->messageid(), target);
  }

  // optional .StringHeader header = 5;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->header(), target);
  }

  // optional .MessageBody body = 6;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->body(), target);
  }

  // optional int64 receivedTime = 7;
  if (has_receivedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->receivedtime(), target);
  }

  // optional int64 transferTime = 8;
  if (has_transfertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->transfertime(), target);
  }

  // repeated .StringHeader headers = 9;
  for (int i = 0; i < this->headers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->headers(i), target);
  }

  // repeated .MessageBody bodys = 10;
  for (int i = 0; i < this->bodys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bodys(i), target);
  }

  // optional .IQMessageKeyType definedKey = 11;
  if (has_definedkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->definedkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IQMessage)
  return target;
}

int IQMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string namespace = 1;
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string messageId = 4;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }

    // optional .StringHeader header = 5;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .MessageBody body = 6;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

    // optional int64 receivedTime = 7;
    if (has_receivedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivedtime());
    }

    // optional int64 transferTime = 8;
    if (has_transfertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transfertime());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .IQMessageKeyType definedKey = 11;
    if (has_definedkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->definedkey());
    }

  }
  // repeated .StringHeader headers = 9;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  // repeated .MessageBody bodys = 10;
  total_size += 1 * this->bodys_size();
  for (int i = 0; i < this->bodys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bodys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IQMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IQMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IQMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IQMessage::MergeFrom(const IQMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  bodys_.MergeFrom(from.bodys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespace_()) {
      set_namespace_(from.namespace_());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_header()) {
      mutable_header()->::StringHeader::MergeFrom(from.header());
    }
    if (from.has_body()) {
      mutable_body()->::MessageBody::MergeFrom(from.body());
    }
    if (from.has_receivedtime()) {
      set_receivedtime(from.receivedtime());
    }
    if (from.has_transfertime()) {
      set_transfertime(from.transfertime());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_definedkey()) {
      set_definedkey(from.definedkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IQMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQMessage::CopyFrom(const IQMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQMessage::IsInitialized() const {

  return true;
}

void IQMessage::Swap(IQMessage* other) {
  if (other != this) {
    std::swap(namespace__, other->namespace__);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(messageid_, other->messageid_);
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(receivedtime_, other->receivedtime_);
    std::swap(transfertime_, other->transfertime_);
    headers_.Swap(&other->headers_);
    bodys_.Swap(&other->bodys_);
    std::swap(definedkey_, other->definedkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IQMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IQMessage_descriptor_;
  metadata.reflection = IQMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PresenceMessage::kNamespaceFieldNumber;
const int PresenceMessage::kKeyFieldNumber;
const int PresenceMessage::kValueFieldNumber;
const int PresenceMessage::kMessageIdFieldNumber;
const int PresenceMessage::kHeaderFieldNumber;
const int PresenceMessage::kBodyFieldNumber;
const int PresenceMessage::kReceivedTimeFieldNumber;
const int PresenceMessage::kTransferTimeFieldNumber;
const int PresenceMessage::kHeadersFieldNumber;
const int PresenceMessage::kBodysFieldNumber;
const int PresenceMessage::kDefinedKeyFieldNumber;
const int PresenceMessage::kCategoryTypeFieldNumber;
#endif  // !_MSC_VER

PresenceMessage::PresenceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PresenceMessage)
}

void PresenceMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::StringHeader*>(&::StringHeader::default_instance());
  body_ = const_cast< ::MessageBody*>(&::MessageBody::default_instance());
}

PresenceMessage::PresenceMessage(const PresenceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PresenceMessage)
}

void PresenceMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  body_ = NULL;
  receivedtime_ = GOOGLE_LONGLONG(0);
  transfertime_ = GOOGLE_LONGLONG(0);
  definedkey_ = 1;
  categorytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PresenceMessage::~PresenceMessage() {
  // @@protoc_insertion_point(destructor:PresenceMessage)
  SharedDtor();
}

void PresenceMessage::SharedDtor() {
  if (namespace__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete namespace__;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void PresenceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PresenceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PresenceMessage_descriptor_;
}

const PresenceMessage& PresenceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

PresenceMessage* PresenceMessage::default_instance_ = NULL;

PresenceMessage* PresenceMessage::New() const {
  return new PresenceMessage;
}

void PresenceMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PresenceMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(receivedtime_, transfertime_);
    if (has_namespace_()) {
      if (namespace__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        namespace__->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messageid_->clear();
      }
    }
    if (has_header()) {
      if (header_ != NULL) header_->::StringHeader::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::MessageBody::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3072) {
    definedkey_ = 1;
    categorytype_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  headers_.Clear();
  bodys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PresenceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PresenceMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string namespace = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "namespace_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_messageId;
        break;
      }

      // optional string messageId = 4;
      case 4: {
        if (tag == 34) {
         parse_messageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messageid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_header;
        break;
      }

      // optional .StringHeader header = 5;
      case 5: {
        if (tag == 42) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_body;
        break;
      }

      // optional .MessageBody body = 6;
      case 6: {
        if (tag == 50) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_receivedTime;
        break;
      }

      // optional int64 receivedTime = 7;
      case 7: {
        if (tag == 56) {
         parse_receivedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivedtime_)));
          set_has_receivedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_transferTime;
        break;
      }

      // optional int64 transferTime = 8;
      case 8: {
        if (tag == 64) {
         parse_transferTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transfertime_)));
          set_has_transfertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_headers;
        break;
      }

      // repeated .StringHeader headers = 9;
      case 9: {
        if (tag == 74) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_headers;
        if (input->ExpectTag(82)) goto parse_bodys;
        break;
      }

      // repeated .MessageBody bodys = 10;
      case 10: {
        if (tag == 82) {
         parse_bodys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bodys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_bodys;
        if (input->ExpectTag(88)) goto parse_definedKey;
        break;
      }

      // optional .PresenceKeyType definedKey = 11;
      case 11: {
        if (tag == 88) {
         parse_definedKey:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PresenceKeyType_IsValid(value)) {
            set_definedkey(static_cast< ::PresenceKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_categoryType;
        break;
      }

      // optional int32 categoryType = 12;
      case 12: {
        if (tag == 96) {
         parse_categoryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &categorytype_)));
          set_has_categorytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PresenceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PresenceMessage)
  return false;
#undef DO_
}

void PresenceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PresenceMessage)
  // optional string namespace = 1;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "namespace_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->namespace_(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // optional string messageId = 4;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->messageid(), output);
  }

  // optional .StringHeader header = 5;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->header(), output);
  }

  // optional .MessageBody body = 6;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->body(), output);
  }

  // optional int64 receivedTime = 7;
  if (has_receivedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->receivedtime(), output);
  }

  // optional int64 transferTime = 8;
  if (has_transfertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->transfertime(), output);
  }

  // repeated .StringHeader headers = 9;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->headers(i), output);
  }

  // repeated .MessageBody bodys = 10;
  for (int i = 0; i < this->bodys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bodys(i), output);
  }

  // optional .PresenceKeyType definedKey = 11;
  if (has_definedkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->definedkey(), output);
  }

  // optional int32 categoryType = 12;
  if (has_categorytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->categorytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PresenceMessage)
}

::google::protobuf::uint8* PresenceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PresenceMessage)
  // optional string namespace = 1;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "namespace_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespace_(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // optional string messageId = 4;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->messageid(), target);
  }

  // optional .StringHeader header = 5;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->header(), target);
  }

  // optional .MessageBody body = 6;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->body(), target);
  }

  // optional int64 receivedTime = 7;
  if (has_receivedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->receivedtime(), target);
  }

  // optional int64 transferTime = 8;
  if (has_transfertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->transfertime(), target);
  }

  // repeated .StringHeader headers = 9;
  for (int i = 0; i < this->headers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->headers(i), target);
  }

  // repeated .MessageBody bodys = 10;
  for (int i = 0; i < this->bodys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bodys(i), target);
  }

  // optional .PresenceKeyType definedKey = 11;
  if (has_definedkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->definedkey(), target);
  }

  // optional int32 categoryType = 12;
  if (has_categorytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->categorytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PresenceMessage)
  return target;
}

int PresenceMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string namespace = 1;
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string messageId = 4;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }

    // optional .StringHeader header = 5;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .MessageBody body = 6;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

    // optional int64 receivedTime = 7;
    if (has_receivedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivedtime());
    }

    // optional int64 transferTime = 8;
    if (has_transfertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transfertime());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .PresenceKeyType definedKey = 11;
    if (has_definedkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->definedkey());
    }

    // optional int32 categoryType = 12;
    if (has_categorytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->categorytype());
    }

  }
  // repeated .StringHeader headers = 9;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  // repeated .MessageBody bodys = 10;
  total_size += 1 * this->bodys_size();
  for (int i = 0; i < this->bodys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bodys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PresenceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PresenceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PresenceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PresenceMessage::MergeFrom(const PresenceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  bodys_.MergeFrom(from.bodys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespace_()) {
      set_namespace_(from.namespace_());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_header()) {
      mutable_header()->::StringHeader::MergeFrom(from.header());
    }
    if (from.has_body()) {
      mutable_body()->::MessageBody::MergeFrom(from.body());
    }
    if (from.has_receivedtime()) {
      set_receivedtime(from.receivedtime());
    }
    if (from.has_transfertime()) {
      set_transfertime(from.transfertime());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_definedkey()) {
      set_definedkey(from.definedkey());
    }
    if (from.has_categorytype()) {
      set_categorytype(from.categorytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PresenceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PresenceMessage::CopyFrom(const PresenceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresenceMessage::IsInitialized() const {

  return true;
}

void PresenceMessage::Swap(PresenceMessage* other) {
  if (other != this) {
    std::swap(namespace__, other->namespace__);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(messageid_, other->messageid_);
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(receivedtime_, other->receivedtime_);
    std::swap(transfertime_, other->transfertime_);
    headers_.Swap(&other->headers_);
    bodys_.Swap(&other->bodys_);
    std::swap(definedkey_, other->definedkey_);
    std::swap(categorytype_, other->categorytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PresenceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PresenceMessage_descriptor_;
  metadata.reflection = PresenceMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XmppMessage::kMessageTypeFieldNumber;
const int XmppMessage::kClientTypeFieldNumber;
const int XmppMessage::kClientVersionFieldNumber;
const int XmppMessage::kNamespaceFieldNumber;
const int XmppMessage::kKeyFieldNumber;
const int XmppMessage::kValueFieldNumber;
const int XmppMessage::kMessageIdFieldNumber;
const int XmppMessage::kHeaderFieldNumber;
const int XmppMessage::kBodyFieldNumber;
const int XmppMessage::kReceivedTimeFieldNumber;
const int XmppMessage::kTransferTimeFieldNumber;
const int XmppMessage::kHeadersFieldNumber;
const int XmppMessage::kBodysFieldNumber;
#endif  // !_MSC_VER

XmppMessage::XmppMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmppMessage)
}

void XmppMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::StringHeader*>(&::StringHeader::default_instance());
  body_ = const_cast< ::MessageBody*>(&::MessageBody::default_instance());
}

XmppMessage::XmppMessage(const XmppMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XmppMessage)
}

void XmppMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messagetype_ = 0;
  clienttype_ = 0;
  clientversion_ = GOOGLE_LONGLONG(0);
  namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  body_ = NULL;
  receivedtime_ = GOOGLE_LONGLONG(0);
  transfertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XmppMessage::~XmppMessage() {
  // @@protoc_insertion_point(destructor:XmppMessage)
  SharedDtor();
}

void XmppMessage::SharedDtor() {
  if (namespace__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete namespace__;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void XmppMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmppMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XmppMessage_descriptor_;
}

const XmppMessage& XmppMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

XmppMessage* XmppMessage::default_instance_ = NULL;

XmppMessage* XmppMessage::New() const {
  return new XmppMessage;
}

void XmppMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<XmppMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(messagetype_, clientversion_);
    if (has_namespace_()) {
      if (namespace__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        namespace__->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messageid_->clear();
      }
    }
    if (has_header()) {
      if (header_ != NULL) header_->::StringHeader::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(receivedtime_, transfertime_);
    if (has_body()) {
      if (body_ != NULL) body_->::MessageBody::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  headers_.Clear();
  bodys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XmppMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmppMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 messageType = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientType;
        break;
      }

      // required int32 clientType = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_clientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clienttype_)));
          set_has_clienttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_clientVersion;
        break;
      }

      // required int64 clientVersion = 3;
      case 3: {
        if (tag == 24) {
         parse_clientVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_namespace;
        break;
      }

      // optional string namespace = 4;
      case 4: {
        if (tag == 34) {
         parse_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "namespace_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_key;
        break;
      }

      // optional string key = 5;
      case 5: {
        if (tag == 42) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_value;
        break;
      }

      // optional string value = 6;
      case 6: {
        if (tag == 50) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_messageId;
        break;
      }

      // optional string messageId = 7;
      case 7: {
        if (tag == 58) {
         parse_messageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messageid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_header;
        break;
      }

      // optional .StringHeader header = 8;
      case 8: {
        if (tag == 66) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_body;
        break;
      }

      // optional .MessageBody body = 9;
      case 9: {
        if (tag == 74) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_receivedTime;
        break;
      }

      // optional int64 receivedTime = 10;
      case 10: {
        if (tag == 80) {
         parse_receivedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivedtime_)));
          set_has_receivedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_transferTime;
        break;
      }

      // optional int64 transferTime = 11;
      case 11: {
        if (tag == 88) {
         parse_transferTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transfertime_)));
          set_has_transfertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_headers;
        break;
      }

      // repeated .StringHeader headers = 12;
      case 12: {
        if (tag == 98) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_headers;
        if (input->ExpectTag(106)) goto parse_bodys;
        break;
      }

      // repeated .MessageBody bodys = 13;
      case 13: {
        if (tag == 106) {
         parse_bodys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bodys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_bodys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmppMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmppMessage)
  return false;
#undef DO_
}

void XmppMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmppMessage)
  // required int32 messageType = 1 [default = 0];
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->messagetype(), output);
  }

  // required int32 clientType = 2 [default = 0];
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clienttype(), output);
  }

  // required int64 clientVersion = 3;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->clientversion(), output);
  }

  // optional string namespace = 4;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "namespace_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->namespace_(), output);
  }

  // optional string key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->key(), output);
  }

  // optional string value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->value(), output);
  }

  // optional string messageId = 7;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->messageid(), output);
  }

  // optional .StringHeader header = 8;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->header(), output);
  }

  // optional .MessageBody body = 9;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->body(), output);
  }

  // optional int64 receivedTime = 10;
  if (has_receivedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->receivedtime(), output);
  }

  // optional int64 transferTime = 11;
  if (has_transfertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->transfertime(), output);
  }

  // repeated .StringHeader headers = 12;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->headers(i), output);
  }

  // repeated .MessageBody bodys = 13;
  for (int i = 0; i < this->bodys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->bodys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XmppMessage)
}

::google::protobuf::uint8* XmppMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XmppMessage)
  // required int32 messageType = 1 [default = 0];
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->messagetype(), target);
  }

  // required int32 clientType = 2 [default = 0];
  if (has_clienttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clienttype(), target);
  }

  // required int64 clientVersion = 3;
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->clientversion(), target);
  }

  // optional string namespace = 4;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "namespace_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->namespace_(), target);
  }

  // optional string key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->key(), target);
  }

  // optional string value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->value(), target);
  }

  // optional string messageId = 7;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->messageid(), target);
  }

  // optional .StringHeader header = 8;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->header(), target);
  }

  // optional .MessageBody body = 9;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->body(), target);
  }

  // optional int64 receivedTime = 10;
  if (has_receivedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->receivedtime(), target);
  }

  // optional int64 transferTime = 11;
  if (has_transfertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->transfertime(), target);
  }

  // repeated .StringHeader headers = 12;
  for (int i = 0; i < this->headers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->headers(i), target);
  }

  // repeated .MessageBody bodys = 13;
  for (int i = 0; i < this->bodys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->bodys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmppMessage)
  return target;
}

int XmppMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 messageType = 1 [default = 0];
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagetype());
    }

    // required int32 clientType = 2 [default = 0];
    if (has_clienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clienttype());
    }

    // required int64 clientVersion = 3;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientversion());
    }

    // optional string namespace = 4;
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_());
    }

    // optional string key = 5;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string messageId = 7;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }

    // optional .StringHeader header = 8;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MessageBody body = 9;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

    // optional int64 receivedTime = 10;
    if (has_receivedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivedtime());
    }

    // optional int64 transferTime = 11;
    if (has_transfertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transfertime());
    }

  }
  // repeated .StringHeader headers = 12;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  // repeated .MessageBody bodys = 13;
  total_size += 1 * this->bodys_size();
  for (int i = 0; i < this->bodys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bodys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmppMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XmppMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XmppMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XmppMessage::MergeFrom(const XmppMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  bodys_.MergeFrom(from.bodys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
    if (from.has_namespace_()) {
      set_namespace_(from.namespace_());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_header()) {
      mutable_header()->::StringHeader::MergeFrom(from.header());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_body()) {
      mutable_body()->::MessageBody::MergeFrom(from.body());
    }
    if (from.has_receivedtime()) {
      set_receivedtime(from.receivedtime());
    }
    if (from.has_transfertime()) {
      set_transfertime(from.transfertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XmppMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmppMessage::CopyFrom(const XmppMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmppMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void XmppMessage::Swap(XmppMessage* other) {
  if (other != this) {
    std::swap(messagetype_, other->messagetype_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(clientversion_, other->clientversion_);
    std::swap(namespace__, other->namespace__);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(messageid_, other->messageid_);
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(receivedtime_, other->receivedtime_);
    std::swap(transfertime_, other->transfertime_);
    headers_.Swap(&other->headers_);
    bodys_.Swap(&other->bodys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XmppMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XmppMessage_descriptor_;
  metadata.reflection = XmppMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
